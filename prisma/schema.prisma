// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  BASIC
  OWNER
  ADMIN
}

model User {
  // Standard data
  uuid      String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Data identifying an entity
  email       String @unique @db.VarChar(255)
  hash        String @db.VarChar(255)
  role        Role   @default(BASIC)
  displayName String @db.VarChar(255)

  // Relational data
  // One user can have many visits as a customer; part of a m-n cardinality
  visits     Visit[]
  // A user can own/manage multiple businesses - ignore joint ownership; part of a 1-n cardinality
  businesses Business[]

  // @@map(dbtable) to this encapsulating named model
  @@map("users")
}

model Visit {
  // Standard data
  uuid      String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Data identifying an entity
  visitedAt DateTime
  rating    Float
  highlight Json

  // Relational data
  // Explicitly define the m-n cardinality between business and user via this join table
  // A visit must be associated with one customer user; part of a m-n cardinality
  user         User     @relation(fields: [userUuid], references: [uuid])
  userUuid     String   @db.VarChar(255)
  // A visit must be associated with one business; part of a m-n cardinality
  business     Business @relation(fields: [businessUuid], references: [uuid])
  businessUuid String   @db.VarChar(255)

  // @@map(dbtable) to this encapsulating named model
  @@map("visits")
}

model GeospatialIndex {
  // Standard data
  uuid      String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Data identifying an entity
  location String @db.VarChar(255)

  // Relational data
  // One geospatial_index is tied to one business; part of a 1-1 cardinality
  business     Business @relation(fields: [businessUuid], references: [uuid])
  businessUuid String   @unique @db.VarChar(255)

  // @@map(dbtable) to this encapsulating named model
  @@map("geospatial_indexes")
}

model Business {
  // Standard data
  uuid      String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Data identifying an entity
  name      String @db.VarChar(255)
  address   String @db.VarChar(255)
  city      String @db.VarChar(255)
  state     String @db.VarChar(255)
  country   String @db.VarChar(255)
  latitude  Float
  longitude Float

  // Relational data
  // One business has one geospatial_index; part of a 1-1 cardinality
  GeospatialIndex GeospatialIndex?
  // One business can have many visits; part of a m-n cardinality
  visits          Visit[]
  // A business can be owned/managed by one user; part of a 1-n cardinality
  // ignore joint ownership and management scenarios in our model which would create a m-n
  owner           User             @relation(fields: [ownerUuid], references: [uuid])
  ownerUuid       String           @db.VarChar(255)

  // @@map(dbtable) to this encapsulating named model
  @@map("businesses")
}
